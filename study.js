// study.js - Material de Estudo COMPLETO e DETALHADO
const studyMaterial = {
    "html-estrutura-basica": {
        title: "üìö HTML - Estrutura B√°sica e Tags Fundamentais",
        content: `üåê **HTML (HyperText Markup Language)**
√â a ESTRUTURA e ESQUELETO das p√°ginas web. Define o CONTE√öDO, n√£o a apar√™ncia.

üèóÔ∏è **ESTRUTURA B√ÅSICA DE UM DOCUMENTO HTML:**

<!DOCTYPE html>
<html lang="pt-br">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Meu Site</title>
</head>
<body>
    <!-- CONTE√öDO VIS√çVEL AQUI -->
    <h1>Ol√° Mundo!</h1>
</body>
</html>

üîç **ANATOMIA DAS TAGS:**

<!-- Tag de abertura -->  <!-- Tag de fechamento -->
    <h1>                  </h1>             
          ‚¨ÜÔ∏è                ‚¨ÜÔ∏è
    Conte√∫do aqui      Mesmo nome com /

üìå **TAGS SEM√ÇNTICAS - Significado Importante:**

<header>    - Cabe√ßalho da p√°gina ou se√ß√£o
<nav>       - Menu de navega√ß√£o
<main>      - Conte√∫do principal
<section>   - Se√ß√£o de conte√∫do
<article>   - Conte√∫do independente (post, not√≠cia)
<aside>     - Conte√∫do lateral (sidebar)
<footer>    - Rodap√©

üéØ **TAGS MAIS IMPORTANTES NA PR√ÅTICA:**

<!-- LINKS - Conex√£o entre p√°ginas -->
<a href="https://exemplo.com">Texto do Link</a>

<!-- LISTAS - Organiza√ß√£o de itens -->
<ul>  <!-- Lista N√ÉO ordenada (bolinhas) -->
    <li>Item 1</li>
    <li>Item 2</li>
</ul>

<ol>  <!-- Lista ORDENADA (n√∫meros) -->
    <li>Primeiro</li>
    <li>Segundo</li>
</ol>

<!-- IMAGENS -->
<img src="foto.jpg" alt="Descri√ß√£o da imagem">

<!-- DIVIS√ïES - Containers gen√©ricos -->
<div>Bloco de conte√∫do</div>
<span>Texto inline</span>

üí° **ATRIBUTOS - Configura√ß√µes das Tags:**

<!-- Atributo href define o destino -->
<a href="contato.html" target="_blank">Contato</a>
     ‚¨ÜÔ∏è              ‚¨ÜÔ∏è
   destino       abre em nova aba

<!-- Atributos comuns -->
id="unico"           /* Identificador √öNICO */
class="grupo"        /* Classe para CSS/JS */
style="color: red;"  /* Estilo inline */
data-info="valor"    /* Dados personalizados */

üöÄ **INCLUS√ÉO DE SCRIPTS E ESTILOS:**

<!-- CSS EXTERNO (RECOMENDADO) -->
<link rel="stylesheet" href="estilos.css">

<!-- CSS INTERNO -->
<style>
    body { color: blue; }
</style>

<!-- JAVASCRIPT EXTERNO -->
<script src="script.js"></script>

<!-- JAVASCRIPT INTERNO -->
<script>
    alert("Ol√°!");
</script>

‚ö†Ô∏è **ERROS COMUNS DE INICIANTE:**
‚Ä¢ Esquecer de fechar tags
‚Ä¢ Confundir <link> (CSS) com <a> (links)
‚Ä¢ Usar m√∫ltiplos elementos com mesmo ID
‚Ä¢ Esquecer o alt em imagens

üõ†Ô∏è **EXERC√çCIO PR√ÅTICO:**
Crie uma p√°gina com:
- T√≠tulo principal
- Lista de 3 links para sites externos
- Imagem com descri√ß√£o
- Rodap√© com copyright

üéì **BOAS PR√ÅTICAS HTML5:**
1. Use tags sem√¢nticas sempre que poss√≠vel
2. Sempre inclua lang no <html>
3. Use UTF-8 para caracteres especiais
4. Mantenha a estrutura hier√°rquica correta
5. Valide seu HTML com validators`
    },

 "git-comandos": {
        title: "üõ†Ô∏è Git - Comandos Essenciais",
        content: `üìö **COMANDOS GIT MAIS USADOS:**

# BAIXAR altera√ß√µes do reposit√≥rio
git pull origin main

# ENVIAR altera√ß√µes para o reposit√≥rio  
git push origin main

# CLONAR reposit√≥rio pela primeira vez
git clone https://github.com/usuario/projeto.git

# BAIXAR mas N√ÉO integrar altera√ß√µes
git fetch origin

üéØ **DIFEREN√áA IMPORTANTE:**
git pull = git fetch + git merge  (faz ambos)
git fetch = apenas baixa (mais seguro)`
    },

    "css-cores-fundos": {
        title: "üé® CSS - Cores e Fundos",
        content: `üé® **PROPRIEDADES DE COR EM CSS:**

/* COR do TEXTO */
color: white;           /* Nome da cor */
color: #ffffff;         /* Hexadecimal */
color: rgb(255,255,255); /* RGB */

/* COR de FUNDO */
background-color: blue;
background-color: #0000ff;
background-color: rgb(0, 0, 255);

üìè **MARGIN vs PADDING:**

/* MARGIN - Espa√ßo EXTERNO */
margin: 10px;           /* Todos os lados */
margin: 10px 20px;      /* Vertical | Horizontal */

/* PADDING - Espa√ßo INTERNO */  
padding: 15px;
padding: 10px 5px 15px 20px; /* Top | Right | Bottom | Left */

üé™ **FLEXBOX - Layout Moderno:**

.container {
    display: flex;          /* ‚úÖ Ativa Flexbox */
    justify-content: center; /* Alinha horizontalmente */
    align-items: center;    /* Alinha verticalmente */
}`
    },

    "html-tags": {
        title: "üåê HTML - Tags Essenciais",
        content: `üèóÔ∏è **TAGS HTML MAIS IMPORTANTES:**

<!-- DIV - Container gen√©rico -->
<div class="box">
    Conte√∫do aqui
</div>                    <!-- ‚úÖ Fechamento correto -->

<!-- LINK entre p√°ginas -->
<a href="https://exemplo.com">Texto do Link</a>

üìù **REGRA DE FECHAMENTO:**
Sempre feche tags com </nomedatag>`
    },

    "javascript-avancado": {
        title: "‚ö° JavaScript - Conceitos Avan√ßados",
        content: `üìÑ **JSON - Troca de Dados:**

// OBJETO ‚Üí STRING JSON
let pessoa = {nome: "Ana", idade: 28};
let jsonString = JSON.stringify(pessoa);

// STRING JSON ‚Üí OBJETO
let objeto = JSON.parse('{"nome":"Jo√£o","idade":32}');

üåê **MANIPULA√á√ÉO DO DOM:**

// REMOVER elemento da p√°gina
elemento.remove();          // ‚úÖ M√©todo moderno

// REQUISI√á√ÉO HTTP GET
fetch('https://api.com/data')
    .then(response => response.json())  // ‚úÖ Converte para objeto
    .then(data => console.log(data));

‚è≥ **ASYNC/AWAIT - C√≥digo Ass√≠ncrono:**

async function buscarDados() {    // ‚úÖ Palavra-chave async
    let response = await fetch(url);
    return response.json();
}`
    },

    "licencas-software": {
        title: "üìú Licen√ßas de Software",
        content: `üéì **LICEN√áAS POPULARES:**

MIT License - ‚úÖ Gratuita, permite uso comercial e modifica√ß√µes
GPL - Gratuita, exige que derivados sejam open source
Apache - Similar √† MIT, com prote√ß√£o de patentes

üí° **PARA ESTUDANTES:**
MIT License √© a mais popular para projetos acad√™micos
e open source.`
    }

    "css-sintaxe-seletores": {
        title: "üé® CSS - Sintaxe, Seletores e Box Model",
        content: `üé® **CSS (Cascading Style Sheets)**
Controla a APAR√äNCIA visual: cores, fontes, layout, anima√ß√µes.

üìñ **SINTAXE B√ÅSICA DO CSS:**

seletor {
    propriedade: valor;
    outra-propriedade: valor;
}

/* EXEMPLO PR√ÅTICO */
.titulo {
    color: blue;
    font-size: 24px;
    margin: 10px;
}

üéØ **SELETORES - Como ENCONTRAR elementos:**

/* Por ELEMENTO (tag) */
div { 
    background: yellow; 
}

/* Por CLASSE (pode repetir) */
.botao { 
    color: white; 
}

/* Por ID (deve ser √öNICO) */
#header { 
    height: 80px; 
}

/* COMBINA√á√ïES AVAN√áADAS */
div.botao           /* <div class="botao"> */
#header .menu       /* Elemento com classe menu DENTRO do header */
div > p             /* Par√°grafos FILHOS DIRETOS de div */
a:hover             /* Quando mouse passa por cima */

üåà **SISTEMA DE CORES - 4 Formas:**

/* 1. NOMES (mais simples) */
color: red;
color: blue;

/* 2. HEXADECIMAL (mais usado) */
color: #ff0000;     /* Vermelho */
color: #27ae60;     /* Verde */
color: #000000;     /* Preto */
color: #ffffff;     /* Branco */

/* 3. RGB (Red, Green, Blue) */
color: rgb(255, 0, 0);      /* Vermelho */
color: rgb(39, 174, 96);    /* Verde */

/* 4. HSL (Hue, Saturation, Lightness) */
color: hsl(0, 100%, 50%);   /* Vermelho */

üèóÔ∏è **BOX MODEL - O Modelo da Caixa:**

[ MARGIN (externo) ]
  [ BORDER (borda) ]
    [ PADDING (interno) ]
      [ CONTE√öDO ]

üìê **PROPRIEDADES DO BOX MODEL:**

.conteudo {
    /* CONTE√öDO - Largura e Altura */
    width: 300px;
    height: 200px;
    
    /* PADDING - Espa√ßo INTERNO */
    padding: 20px;              /* Todos os lados */
    padding: 10px 20px;         /* Vertical | Horizontal */
    padding: 5px 10px 15px 20px; /* Top | Right | Bottom | Left */
    
    /* BORDER - Linha ao redor */
    border: 2px solid #000;     /* Largura | Estilo | Cor */
    border-radius: 10px;        /* Cantos arredondados */
    
    /* MARGIN - Espa√ßo EXTERNO */
    margin: 15px;
}

üé™ **ESTILOS DE BORDA:**

border: 2px solid red;      /* Linha cont√≠nua */
border: 3px dotted blue;    /* Pontilhado */
border: 1px dashed green;   /* Tracejado */
border: 4px double black;   /* Dupla */

üìè **UNIDADES DE MEDIDA:**

/* ABSOLUTAS (fixas) */
px  /* Pixels - mais comum */
pt  /* Points - impress√£o */

/* RELATIVAS (flex√≠veis) */
%   /* Porcentagem do elemento pai */
em  /* Tamanho da fonte do elemento pai */
rem /* Tamanho da fonte do elemento raiz (html) */
vw  /* Porcentagem da largura da viewport */
vh  /* Porcentagem da altura da viewport */

üöÄ **LAYOUT E POSICIONAMENTO B√ÅSICO:**

/* DISPLAY - Como o elemento se comporta */
display: block;      /* Ocupa linha inteira (div, h1, p) */
display: inline;     /* Na mesma linha (span, a, strong) */
display: inline-block; /* Linha mas com width/height */
display: none;       /* Escondido completamente */

/* POSITION - Posicionamento */
position: static;    /* Padr√£o - fluxo normal */
position: relative;  /* Relativo √† posi√ß√£o normal */
position: absolute;  /* Relativo ao elemento pai posicionado */
position: fixed;     /* Fixo na tela */

üõ†Ô∏è **EXEMPLO COMPLETO - Bot√£o Estilizado:**

.botao {
    /* CONTE√öDO */
    color: white;
    font-size: 16px;
    text-decoration: none;
    text-align: center;
    
    /* BOX MODEL */
    background: #3498db;
    padding: 12px 24px;
    border: none;
    border-radius: 6px;
    margin: 10px;
    
    /* LAYOUT */
    display: inline-block;
    cursor: pointer;
    
    /* EFEITOS */
    transition: all 0.3s ease;
    box-shadow: 0 2px 5px rgba(0,0,0,0.2);
}

.botao:hover {
    background: #2980b9;
    transform: translateY(-2px);
    box-shadow: 0 4px 10px rgba(0,0,0,0.3);
}

üí° **DICAS IMPORTANTES:**
‚Ä¢ Use classes para estilos reutiliz√°veis
‚Ä¢ IDs apenas para elementos √∫nicos
‚Ä¢ Sempre teste em m√∫ltiplos navegadores
‚Ä¢ Use unidades relativas para responsividade
‚Ä¢ Organize propriedades por categoria

‚ö†Ô∏è **ERROS COMUNS:**
‚Ä¢ Confundir padding com margin
‚Ä¢ Usar !important sem necessidade
‚Ä¢ Esquecer do border-radius em bot√µes
‚Ä¢ N√£o testar contraste de cores`
    },

    "javascript-variaveis-tipos": {
        title: "üíª JavaScript - Vari√°veis, Tipos de Dados e Operadores",
        content: `‚ö° **JAVASCRIPT - A Linguagem da Web**
Adiciona INTERATIVIDADE e COMPORTAMENTO √†s p√°ginas.

üìù **VARI√ÅVEIS - Caixas que guardam valores:**

// FORMAS DE DECLARAR VARI√ÅVEIS:

// 1. let - vari√°vel que PODE mudar (RECOMENDADO)
let nome = "Jo√£o";
nome = "Maria";  // ‚úÖ PERMITIDO

// 2. const - CONSTANTE, N√ÉO pode mudar (MAIS SEGURO)
const PI = 3.14;
// PI = 3.15;    // ‚ùå ERRO! Constante n√£o muda

// 3. var - forma ANTIGA (EVITAR)
var idade = 25;

üéØ **POR QUE USAR const E let?**

‚Ä¢ const - Use SEMPRE que o valor N√ÉO mudar
‚Ä¢ let - Use APENAS quando o valor PRECISAR mudar
‚Ä¢ var - Tem problemas de escopo, EVITE

üî§ **TIPOS DE DADOS PRIMITIVOS:**

// STRING - Texto
let nome = "Maria";
let sobrenome = 'Silva';
let frase = \`Ol√° \${nome}!\`;  // Template string

// NUMBER - N√∫meros
let idade = 25;
let preco = 19.99;
let temperatura = -5;

// BOOLEAN - Verdadeiro ou Falso
let ligado = true;
let encontrado = false;

// UNDEFINED - N√£o definido
let valor;          // undefined
let coisa = undefined;

// NULL - Nulo intencional
let vazio = null;

üì¶ **TIPOS DE DADOS COMPOSTOS:**

// ARRAY - Lista ordenada
let frutas = ["ma√ß√£", "banana", "laranja"];
let numeros = [1, 2, 3, 4, 5];
let misto = [1, "texto", true];

// OBJECT - Cole√ß√£o de propriedades
let pessoa = {
    nome: "Carlos",
    idade: 30,
    cidade: "S√£o Paulo",
    ativo: true
};

üî¢ **OPERADORES ARITM√âTICOS:**

let a = 10, b = 3;

a + b    // 13  - Adi√ß√£o
a - b    // 7   - Subtra√ß√£o  
a * b    // 30  - Multiplica√ß√£o
a / b    // 3.33 - Divis√£o
a % b    // 1   - M√≥dulo (resto da divis√£o)
a ** b   // 1000 - Exponencia√ß√£o (a elevado a b)

‚öñÔ∏è **OPERADORES DE COMPARA√á√ÉO:**

// IGUALDADE ESTRITA (RECOMENDADO)
5 === 5      // true - mesmo valor E tipo
5 === "5"    // false - n√∫mero ‚â† string

// IGUALDADE SOLTA (EVITAR)
5 == 5       // true
5 == "5"     // true - converte tipos

// DIFEREN√áA
10 !== 5     // true
10 != "10"   // false

// MAIOR/MENOR
10 > 5       // true
10 < 5       // false
10 >= 10     // true
10 <= 5      // false

üîó **OPERADORES L√ìGICOS:**

let temIdade = true;
let temDocumento = false;

// AND - Ambos devem ser true
temIdade && temDocumento    // false

// OR - Pelo menos um true  
temIdade || temDocumento    // true

// NOT - Inverte o valor
!temIdade                   // false

üéÆ **ESTRUTURAS DE CONTROLE - IF/ELSE:**

let idade = 18;

// IF SIMPLES
if (idade >= 18) {
    console.log("Maior de idade");
}

// IF/ELSE
if (idade >= 18) {
    console.log("Pode dirigir");
} else {
    console.log("N√£o pode dirigir");
}

// IF/ELSE IF/ELSE
if (idade < 16) {
    console.log("N√£o pode votar");
} else if (idade < 18) {
    console.log("Voto opcional");
} else {
    console.log("Voto obrigat√≥rio");
}

üîÑ **LOOPS - FOR E WHILE:**

// FOR - Quando sabemos quantas repeti√ß√µes
for (let i = 0; i < 5; i++) {
    console.log(i);  // 0, 1, 2, 3, 4
}

// WHILE - Quando N√ÉO sabemos quantas repeti√ß√µes
let contador = 0;
while (contador < 5) {
    console.log(contador);
    contador++;
}

// DO-WHILE - Executa pelo menos uma vez
let numero;
do {
    numero = Math.random();
} while (numero < 0.5);

üõ†Ô∏è **EXEMPLO PR√ÅTICO - Calculadora Simples:**

function calculadora(a, b, operacao) {
    if (operacao === '+') {
        return a + b;
    } else if (operacao === '-') {
        return a - b;
    } else if (operacao === '*') {
        return a * b;
    } else if (operacao === '/') {
        return a / b;
    } else {
        return "Opera√ß√£o inv√°lida";
    }
}

// Uso
let resultado = calculadora(10, 5, '+');  // 15

üí° **DICAS IMPORTANTES:**
‚Ä¢ Use nomes descritivos para vari√°veis
‚Ä¢ Sempre declare vari√°veis antes de usar
‚Ä¢ Prefira === em vez de ==
‚Ä¢ Use const por padr√£o, let apenas quando necess√°rio
‚Ä¢ Comente c√≥digo complexo

‚ö†Ô∏è **ERROS COMUNS:**
‚Ä¢ Esquecer de declarar vari√°veis
‚Ä¢ Confundir = (atribui√ß√£o) com === (compara√ß√£o)
‚Ä¢ Usar var em vez de let/const
‚Ä¢ N√£o tratar casos especiais (divis√£o por zero)`
    },

    "javascript-funcoes": {
        title: "üíª JavaScript - Fun√ß√µes e Escopo",
        content: `üéØ **FUN√á√ïES - Blocos de c√≥digo reutiliz√°veis**
Agrupam instru√ß√µes para executar tarefas espec√≠ficas.

üìù **DECLARA√á√ÉO DE FUN√á√ïES:**

// 1. FUNCTION DECLARATION (hoisting - pode chamar antes)
function saudacao(nome) {
    return "Ol√°, " + nome + "!";
}

// 2. FUNCTION EXPRESSION
const saudacao = function(nome) {
    return "Ol√°, " + nome + "!";
};

// 3. ARROW FUNCTION (ES6+ - moderna)
const saudacao = (nome) => {
    return "Ol√°, " + nome + "!";
};

üîÑ **CHAMANDO FUN√á√ïES:**

// Fun√ß√£o sem par√¢metros
function cumprimentar() {
    console.log("Bom dia!");
}
cumprimentar();  // "Bom dia!"

// Fun√ß√£o com par√¢metros
function somar(a, b) {
    return a + b;
}
let resultado = somar(5, 3);  // resultado = 8

// Fun√ß√£o com m√∫ltiplos par√¢metros
function criarUsuario(nome, email, idade = 18) {
    return {
        nome: nome,
        email: email,
        idade: idade
    };
}

üé™ **PAR√ÇMETROS E ARGUMENTOS:**

// PAR√ÇMETROS - Vari√°veis na defini√ß√£o
function calcular(operacao, a, b) {
    // operacao, a, b s√£o par√¢metros
}

// ARGUMENTOS - Valores passados na chamada
calcular('soma', 10, 5);  // 'soma', 10, 5 s√£o argumentos

// VALOR PADR√ÉO para par√¢metros
function multiplicar(a, b = 1) {
    return a * b;
}
multiplicar(5);     // 5 (b usa valor padr√£o 1)
multiplicar(5, 2);  // 10

üîô **RETURN - Retornando valores:**

// COM return - devolve um valor
function quadrado(x) {
    return x * x;  // ‚Üê valor retornado
}
let resultado = quadrado(4);  // 16

// SEM return - retorna undefined
function apenasLog(x) {
    console.log(x);
    // ‚Üê sem return = undefined
}
let resultado = apenasLog(5);  // undefined

üèπ **ARROW FUNCTIONS (ES6+):**

// Sintaxe b√°sica
const soma = (a, b) => {
    return a + b;
};

// Formas concisas:

// 1 par√¢metro - sem par√™nteses
const quadrado = x => x * x;

// M√∫ltiplos par√¢metros - com par√™nteses
const soma = (a, b) => a + b;

// Sem par√¢metros - par√™nteses vazios
const mensagem = () => "Hello World";

// M√∫ltiplas linhas - chaves e return
const calcular = (a, b) => {
    let resultado = a + b;
    return resultado * 2;
};

üåç **ESCOPO - Onde vari√°veis s√£o vis√≠veis:**

// ESCOPO GLOBAL - Dispon√≠vel em todo c√≥digo
const global = "Estou em todo lugar";

function testeEscopo() {
    // ESCOPO LOCAL - S√≥ dentro desta fun√ß√£o
    let local = "S√≥ existo aqui";
    console.log(global);  // ‚úÖ Funciona
    console.log(local);   // ‚úÖ Funciona
}

console.log(global);  // ‚úÖ Funciona  
console.log(local);   // ‚ùå ERRO - local n√£o existe aqui

üîç **ESCOPO COM LET/CONST vs VAR:**

// COM let/const - escopo de bloco
if (true) {
    let dentroIf = "s√≥ no if";
    const constante = "tamb√©m s√≥ aqui";
}
console.log(dentroIf);   // ‚ùå ERRO

// COM var - escopo de fun√ß√£o (problema!)
if (true) {
    var vazamento = "vaza do if";
}
console.log(vazamento);  // ‚úÖ Funciona (PROBLEMA!)

üõ†Ô∏è **EXEMPLOS PR√ÅTICOS:**

// 1. FUN√á√ÉO PARA VERIFICAR PAR/√çMPAR
function ehPar(numero) {
    return numero % 2 === 0;
}

// 2. FUN√á√ÉO PARA FORMATAR MOEDA
function formatarMoeda(valor) {
    return 'R$ ' + valor.toFixed(2).replace('.', ',');
}

// 3. FUN√á√ÉO PARA VALIDAR EMAIL
function validarEmail(email) {
    return email.includes('@') && email.includes('.');
}

// 4. CALCULADORA COM ARROW FUNCTIONS
const calculadora = {
    soma: (a, b) => a + b,
    subtrair: (a, b) => a - b,
    multiplicar: (a, b) => a * b,
    dividir: (a, b) => b !== 0 ? a / b : 'Erro: divis√£o por zero'
};

üöÄ **CASOS DE USO AVAN√áADOS:**

// FUN√á√ïES COMO PAR√ÇMETROS (callback)
function executarOperacao(a, b, operacao) {
    return operacao(a, b);
}

let resultado = executarOperacao(10, 5, (x, y) => x * y);

// RETORNANDO FUN√á√ïES (closure)
function criarMultiplicador(multiplicador) {
    return function(numero) {
        return numero * multiplicador;
    };
}

const dobrar = criarMultiplicador(2);
dobrar(5);  // 10

üí° **BOAS PR√ÅTICAS:**
‚Ä¢ Fun√ß√µes devem fazer UMA coisa bem feita
‚Ä¢ Use nomes verbosos para fun√ß√µes (somar, validar, formatar)
‚Ä¢ Limite o n√∫mero de par√¢metros (m√°ximo 3-4)
‚Ä¢ Use arrow functions para callbacks
‚Ä¢ Documente fun√ß√µes complexas

‚ö†Ô∏è **ERROS COMUNS:**
‚Ä¢ Esquecer o return em fun√ß√µes que devolvem valores
‚Ä¢ Confundir par√¢metros com argumentos
‚Ä¢ Modificar par√¢metros originais (crie c√≥pias)
‚Ä¢ Criar fun√ß√µes grandes demais (‰∏äÂ∏ùÂáΩÊï∞)`
    },

    "javascript-arrays-objetos": {
        title: "üîß JavaScript - Arrays, Objetos e M√©todos",
        content: `üìä **ARRAYS - Listas ordenadas de valores**
Estrutura fundamental para armazenar cole√ß√µes de dados.

üéØ **CRIANDO E ACESSANDO ARRAYS:**

// CRIANDO ARRAYS
let vazio = [];                      // Array vazio
let frutas = ["ma√ß√£", "banana", "laranja"];  // Com strings
let numeros = [1, 2, 3, 4, 5];      // Com n√∫meros
let misto = [1, "texto", true, null]; // Tipos mistos

// ACESSANDO ELEMENTOS
let primeiro = frutas[0];    // "ma√ß√£" - √≠ndice 0
let segundo = frutas[1];     // "banana" - √≠ndice 1  
let ultimo = frutas[2];      // "laranja" - √≠ndice 2
let tamanho = frutas.length; // 3 - n√∫mero de elementos

// MODIFICANDO ELEMENTOS
frutas[1] = "uva";          // ["ma√ß√£", "uva", "laranja"]
frutas[3] = "morango";      // Adiciona novo elemento

üîÑ **M√âTODOS DE ARRAY - ADICIONAR/REMOVER:**

let lista = ["A", "B", "C"];

// ADICIONAR NO FINAL
lista.push("D");        // ["A", "B", "C", "D"]

// REMOVER DO FINAL  
lista.pop();            // ["A", "B", "C"] - remove "D"

// ADICIONAR NO IN√çCIO
lista.unshift("Z");     // ["Z", "A", "B", "C"]

// REMOVER DO IN√çCIO
lista.shift();          // ["A", "B", "C"] - remove "Z"

üé™ **OUTROS M√âTODOS IMPORTANTES:**

let numeros = [1, 2, 3, 4, 5];

// ENCONTRAR ELEMENTO
let encontrado = numeros.find(n => n > 3);  // 4 - primeiro > 3

// FILTRAR ELEMENTOS
let filtrados = numeros.filter(n => n % 2 === 0);  // [2, 4] - pares

// TRANSFORMAR ELEMENTOS
let dobrados = numeros.map(n => n * 2);  // [2, 4, 6, 8, 10]

// ORDENAR
let desordenado = [3, 1, 4, 2];
let ordenado = desordenado.sort();  // [1, 2, 3, 4]

// JUNTAR EM STRING
let texto = frutas.join(", ");  // "ma√ß√£, banana, laranja"

üì¶ **OBJETOS - Cole√ß√µes de propriedades**
Armazenam dados como pares CHAVE-VALOR.

üèóÔ∏è **CRIANDO E ACESSANDO OBJETOS:**

// SINTAXE LITERAL (mais comum)
let pessoa = {
    nome: "Maria",
    idade: 30,
    cidade: "S√£o Paulo",
    ativo: true
};

// ACESSANDO PROPRIEDADES
console.log(pessoa.nome);        // "Maria" - nota√ß√£o de ponto
console.log(pessoa["idade"]);    // 30 - nota√ß√£o de colchetes

// MODIFICANDO PROPRIEDADES
pessoa.idade = 31;
pessoa.profissao = "Desenvolvedora";  // Adiciona nova propriedade

üîß **M√âTODOS EM OBJETOS:**

let calculadora = {
    // PROPRIEDADES
    marca: "XYZ",
    
    // M√âTODOS (fun√ß√µes dentro de objetos)
    somar: function(a, b) {
        return a + b;
    },
    
    // M√âTODO MODERNO (ES6+)
    subtrair(a, b) {
        return a - b;
    },
    
    // M√âTODO COM this
    mostrarMarca() {
        return "Marca: " + this.marca;
    }
};

// USANDO M√âTODOS
calculadora.somar(5, 3);        // 8
calculadora.mostrarMarca();     // "Marca: XYZ"

üîÑ **PERCORRENDO ARRAYS E OBJETOS:**

// FOR CL√ÅSSICO - Arrays
let numeros = [10, 20, 30];
for (let i = 0; i < numeros.length; i++) {
    console.log(numeros[i]);  // 10, 20, 30
}

// FOR...OF - Arrays (moderno)
for (let numero of numeros) {
    console.log(numero);      // 10, 20, 30
}

// FOR...IN - Objetos (propriedades)
for (let propriedade in pessoa) {
    console.log(propriedade + ": " + pessoa[propriedade]);
}

// forEach - Arrays (funcional)
numeros.forEach(function(numero, index) {
    console.log(index + ": " + numero);
});

üéØ **M√âTODOS DE STRING:**

let texto = "JavaScript √© incr√≠vel!";

// TRANSFORMA√á√ÉO
texto.toUpperCase();      // "JAVASCRIPT √â INCR√çVEL!"
texto.toLowerCase();      // "javascript √© incr√≠vel!"
texto.trim();             // Remove espa√ßos do in√≠cio/fim

// INFORMA√á√ÉO
texto.length;             // 22 - n√∫mero de caracteres
texto.includes("Script"); // true - cont√©m "Script"
texto.indexOf("√©");       // 11 - posi√ß√£o do "√©"

// MANIPULA√á√ÉO
texto.slice(0, 10);       // "JavaScript" - extrai parte
texto.replace("incr√≠vel", "fant√°stico"); // Substitui

üî¢ **OBJETOS MATH E DATE:**

// MATH - Opera√ß√µes matem√°ticas
Math.round(4.7);          // 5 - arredonda
Math.floor(4.7);          // 4 - arredonda para baixo
Math.ceil(4.2);           // 5 - arredonda para cima
Math.random();            // N√∫mero aleat√≥rio entre 0-1
Math.max(1, 5, 3);        // 5 - maior n√∫mero
Math.min(1, 5, 3);        // 1 - menor n√∫mero

// DATE - Trabalhar com datas
let agora = new Date();                // Data/hora atual
let natal = new Date(2024, 11, 25);   // 25/12/2024

agora.getFullYear();       // 2024 - ano
agora.getMonth();          // 0-11 - m√™s (0 = Janeiro)
agora.getDate();           // 1-31 - dia do m√™s
agora.getDay();            // 0-6 - dia da semana (0 = Domingo)

üìù **TEMPLATE STRINGS (ES6+):**

let nome = "Carlos";
let idade = 25;

// CONCATENA√á√ÉO TRADICIONAL (complexa)
let mensagem = "Ol√°, " + nome + "! Voc√™ tem " + idade + " anos.";

// TEMPLATE STRING (moderna e limpa)
let mensagem = \`Ol√°, \${nome}! Voc√™ tem \${idade} anos.\`;

// MULTILINHA NATURAL
let texto = \`
    Linha 1
    Linha 2
    Linha 3
\`;

// EXPRESS√ïES DENTRO DE \${}
let calculo = \`5 + 3 = \${5 + 3}\`;  // "5 + 3 = 8"

üõ†Ô∏è **EXEMPLOS PR√ÅTICOS:**

// 1. LISTA DE COMPRAS
let compras = ["p√£o", "leite", "ovos"];
compras.push("queijo");
compras.forEach(item => console.log("- " + item));

// 2. SISTEMA DE USU√ÅRIOS
let usuarios = [
    { nome: "Ana", idade: 28, ativo: true },
    { nome: "Jo√£o", idade: 32, ativo: false },
    { nome: "Maria", idade: 25, ativo: true }
];

let usuariosAtivos = usuarios.filter(u => u.ativo);
let nomes = usuarios.map(u => u.nome);

// 3. CALCULADORA ESTAT√çSTICA
let numeros = [10, 20, 30, 40, 50];
let soma = numeros.reduce((total, num) => total + num, 0);
let media = soma / numeros.length;
let maximo = Math.max(...numeros);

üí° **DICAS AVAN√áADAS:**
‚Ä¢ Use map/filter/reduce para manipula√ß√£o funcional
‚Ä¢ Spread operator (...) para copiar arrays/objetos
‚Ä¢ Destructuring para extrair valores facilmente
‚Ä¢ M√©todos encadeados para opera√ß√µes sequenciais

‚ö†Ô∏è **ERROS COMUNS:**
‚Ä¢ Modificar arrays originais acidentalmente
‚Ä¢ Confundir == com === em objetos
‚Ä¢ Esquecer que arrays s√£o refer√™ncias
‚Ä¢ N√£o tratar casos de array vazio`
    },

    "javascript-dom-eventos": {
        title: "‚ö° JavaScript - DOM, Eventos e JSON",
        content: `üåê **DOM (Document Object Model)**
Representa√ß√£o da p√°gina web como OBJETOS que podemos manipular com JavaScript.

üèóÔ∏è **SELECIONANDO ELEMENTOS DO DOM:**

// POR ID (retorna UM elemento)
let titulo = document.getElementById("meuTitulo");

// POR CLASSE (retorna COLEC√ÉO)
let botoes = document.getElementsByClassName("botao");

// POR TAG (retorna COLEC√ÉO)  
let paragrafos = document.getElementsByTagName("p");

// POR SELETOR CSS (retorna PRIMEIRO)
let elemento = document.querySelector(".minha-classe");

// POR SELETOR CSS (retorna TODOS)
let elementos = document.querySelectorAll("div.botao");

üéØ **MANIPULANDO CONTE√öDO E ATRIBUTOS:**

// CONTE√öDO DE TEXTO
elemento.textContent = "Novo texto";     // Apenas texto
elemento.innerHTML = "<strong>Texto</strong>";  // HTML

// ATRIBUTOS
elemento.setAttribute("id", "novoId");   // Adiciona/modifica
elemento.getAttribute("id");             // L√™ valor
elemento.removeAttribute("id");          // Remove

// CLASSES
elemento.classList.add("nova-classe");      // Adiciona
elemento.classList.remove("classe-antiga"); // Remove
elemento.classList.toggle("ativo");         // Alterna
elemento.classList.contains("classe");      // Verifica

// ESTILOS
elemento.style.color = "red";            // Cor do texto
elemento.style.backgroundColor = "blue"; // Cor de fundo
elemento.style.fontSize = "20px";        // Tamanho da fonte

üîÑ **CRIANDO E REMOVENDO ELEMENTOS:**

// CRIAR NOVO ELEMENTO
let novoParagrafo = document.createElement("p");
novoParagrafo.textContent = "Novo par√°grafo";

// ADICIONAR AO DOM
document.body.appendChild(novoParagrafo);        // Final
elementoPai.prepend(novoElemento);               // In√≠cio
elementoReferencia.before(novoElemento);         // Antes
elementoReferencia.after(novoElemento);          // Depois

// CLONAR ELEMENTO
let copia = elementoOriginal.cloneNode(true);    // true = copia filhos

// REMOVER ELEMENTO
elemento.remove();                               // M√©todo moderno
elementoPai.removeChild(elemento);               // M√©todo antigo

üé™ **EVENTOS - Respondendo a a√ß√µes do usu√°rio:**

// ADICIONAR EVENT LISTENER (MODERNO)
elemento.addEventListener("click", function() {
    console.log("Elemento clicado!");
});

// EVENTOS COMUNS:
"click"         // Clique do mouse
"mouseover"     // Mouse sobre elemento
"mouseout"      // Mouse sai do elemento
"keydown"       // Tecla pressionada
"keyup"         // Tecla liberada
"submit"        // Formul√°rio enviado
"change"        // Valor alterado (input, select)
"load"          // P√°gina carregada

üõ†Ô∏è **EXEMPLOS PR√ÅTICOS DE EVENTOS:**

// 1. BOT√ÉO QUE ALTERA COR
let botao = document.getElementById("meuBotao");
let div = document.getElementById("minhaDiv");

botao.addEventListener("click", function() {
    div.style.backgroundColor = "lightblue";
});

// 2. VALIDA√á√ÉO DE FORMUL√ÅRIO
let formulario = document.querySelector("form");

formulario.addEventListener("submit", function(event) {
    let email = document.getElementById("email").value;
    
    if (!email.includes("@")) {
        event.preventDefault();  // Impede envio
        alert("Email inv√°lido!");
    }
});

// 3. CONTADOR DE CLIKES
let contador = 0;
let botaoContador = document.getElementById("contador");

botaoContador.addEventListener("click", function() {
    contador++;
    botaoContador.textContent = "Clicado: " + contador;
});

üìÑ **JSON (JavaScript Object Notation)**
Formato leve para troca de dados entre sistemas.

üîÑ **CONVERTENDO ENTRE JSON E OBJETOS:**

// OBJETO JAVASCRIPT ‚Üí STRING JSON
let pessoa = { nome: "Ana", idade: 28 };
let jsonString = JSON.stringify(pessoa);
// '{"nome":"Ana","idade":28}'

// STRING JSON ‚Üí OBJETO JAVASCRIPT  
let jsonTexto = '{"nome":"Jo√£o","idade":32}';
let objeto = JSON.parse(jsonTexto);
// { nome: "Jo√£o", idade: 32 }

üéØ **USANDO JSON NA PR√ÅTICA:**

// SALVAR NO LOCALSTORAGE
let usuario = { nome: "Maria", tema: "escuro" };
localStorage.setItem("usuario", JSON.stringify(usuario));

// RECUPERAR DO LOCALSTORAGE
let dadosSalvos = localStorage.getItem("usuario");
let usuarioRecuperado = JSON.parse(dadosSalvos);

// ENVIAR PARA API
fetch('/api/usuarios', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(usuario)
});

üåê **FETCH API - Fazendo requisi√ß√µes HTTP:**

// REQUISI√á√ÉO GET SIMPLES
fetch('https://api.exemplo.com/usuarios')
    .then(response => response.json())  // Converte para JSON
    .then(data => {
        console.log(data);  // Dados da API
    })
    .catch(error => {
        console.error('Erro:', error);
    });

// REQUISI√á√ÉO COM TRATAMENTO DE ERRO
fetch('https://api.exemplo.com/dados')
    .then(response => {
        if (!response.ok) {
            throw new Error('Erro na requisi√ß√£o: ' + response.status);
        }
        return response.json();
    })
    .then(data => processarDados(data))
    .catch(error => console.error('Falha:', error));

‚è≥ **ASYNC/AWAIT - Sintaxe moderna para promises:**

// FUN√á√ÉO ASS√çNCORA
async function buscarUsuario(id) {
    try {
        let response = await fetch(\`https://api.exemplo.com/usuarios/\${id}\`);
        
        if (!response.ok) {
            throw new Error('Usu√°rio n√£o encontrado');
        }
        
        let usuario = await response.json();
        return usuario;
        
    } catch (error) {
        console.error('Erro ao buscar usu√°rio:', error);
        return null;
    }
}

// USANDO A FUN√á√ÉO ASS√çNCORA
async function mostrarUsuario() {
    let usuario = await buscarUsuario(123);
    if (usuario) {
        console.log('Usu√°rio:', usuario.nome);
    }
}

üõ†Ô∏è **EXEMPLO COMPLETO - Sistema de Tarefas:**

// ESTRUTURA HTML:
// <input id="novaTarefa">
// <button id="adicionar">Adicionar</button>
// <ul id="listaTarefas"></ul>

document.addEventListener('DOMContentLoaded', function() {
    let inputTarefa = document.getElementById('novaTarefa');
    let botaoAdicionar = document.getElementById('adicionar');
    let listaTarefas = document.getElementById('listaTarefas');
    
    // Carregar tarefas salvas
    let tarefasSalvas = localStorage.getItem('tarefas');
    if (tarefasSalvas) {
        listaTarefas.innerHTML = JSON.parse(tarefasSalvas);
    }
    
    // Adicionar nova tarefa
    botaoAdicionar.addEventListener('click', function() {
        let texto = inputTarefa.value.trim();
        
        if (texto !== '') {
            let li = document.createElement('li');
            li.textContent = texto;
            
            // Bot√£o para remover
            let botaoRemover = document.createElement('button');
            botaoRemover.textContent = '‚ùå';
            botaoRemover.addEventListener('click', function() {
                li.remove();
                salvarTarefas();
            });
            
            li.appendChild(botaoRemover);
            listaTarefas.appendChild(li);
            
            inputTarefa.value = '';
            salvarTarefas();
        }
    });
    
    function salvarTarefas() {
        localStorage.setItem('tarefas', JSON.stringify(listaTarefas.innerHTML));
    }
});

üí° **DICAS AVAN√áADAS:**
‚Ä¢ Use event delegation para elementos din√¢micos
‚Ä¢ Sempre valide dados antes do JSON.parse
‚Ä¢ Use try/catch com opera√ß√µes ass√≠ncronas
‚Ä¢ Prefira addEventListener em vez de onclick

‚ö†Ô∏è **ERROS COMUNS:**
‚Ä¢ Esquecer await em fun√ß√µes async
‚Ä¢ N√£o tratar erros em promises
‚Ä¢ Modificar DOM em loops (causa reflow)
‚Ä¢ Vazamento de mem√≥ria com event listeners`
    },

    "javascript-avancado": {
        title: "‚ö° JavaScript - Recursos Avan√ßados ES6+",
        content: `üöÄ **RECURSOS AVAN√áADOS DO JAVASCRIPT MODERNO**
Funcionalidades que tornam o c√≥digo mais limpo e poderoso.

üéØ **DESTRUCTURING - Extraindo valores facilmente:**

// DESTRUCTURING DE ARRAY
let [primeiro, segundo] = [10, 20, 30];
// primeiro = 10, segundo = 20

// PULAR ELEMENTOS
let [x, , z] = [1, 2, 3];  // x=1, z=3

// VALOR PADR√ÉO
let [nome = "Visitante"] = [];  // nome="Visitante"

// DESTRUCTURING DE OBJETO
let { nome, idade } = { nome: "Carlos", idade: 30, cidade: "SP" };
// nome = "Carlos", idade = 30

// RENOMEAR VARI√ÅVEIS
let { nome: firstName, idade: age } = pessoa;

üì§ **SPREAD OPERATOR (...) - Expandindo elementos:**

// COM ARRAYS - Copiar e combinar
let arr1 = [1, 2, 3];
let arr2 = [4, 5, 6];
let combinado = [...arr1, ...arr2];  // [1, 2, 3, 4, 5, 6]

let copia = [...arr1];  // C√≥pia superficial [1, 2, 3]

// COM OBJETOS - Copiar e mesclar
let obj1 = { a: 1, b: 2 };
let obj2 = { c: 3, d: 4 };
let merged = { ...obj1, ...obj2 };  // {a:1, b:2, c:3, d:4}

// EM CHAMADAS DE FUN√á√ÉO
let numeros = [1, 2, 3];
Math.max(...numeros);  // Equivale a Math.max(1, 2, 3)

üèóÔ∏è **CLASSES - Programa√ß√£o Orientada a Objetos:**

// DEFINI√á√ÉO DE CLASSE
class Pessoa {
    // CONSTRUCTOR - inicializa√ß√£o
    constructor(nome, idade) {
        this.nome = nome;
        this.idade = idade;
    }
    
    // M√âTODOS (automatically in prototype)
    falar() {
        return \`Ol√°, meu nome √© \${this.nome}\`;
    }
    
    // M√âTODO EST√ÅTICO
    static definirEspecie() {
        return "Homo sapiens";
    }
}

// USANDO A CLASSE
let joao = new Pessoa("Jo√£o", 25);
joao.falar();  // "Ol√°, meu nome √© Jo√£o"
Pessoa.definirEspecie();  // "Homo sapiens"

// HERAN√áA
class Estudante extends Pessoa {
    constructor(nome, idade, curso) {
        super(nome, idade);  // Chama constructor da classe pai
        this.curso = curso;
    }
    
    estudar() {
        return \`\${this.nome} est√° estudando \${this.curso}\`;
    }
}

üó∫Ô∏è **MAP - Estrutura de dados chave-valor avan√ßada:**

// CRIANDO MAP
let mapa = new Map();

// M√âTODOS PRINCIPAIS
mapa.set("nome", "Maria");        // Adicionar
mapa.set(1, "n√∫mero um");         // Chave pode ser qualquer tipo
mapa.get("nome");                 // "Maria" - Obter valor
mapa.has("nome");                 // true - Verificar exist√™ncia
mapa.delete("nome");              // Remover
mapa.size;                        // N√∫mero de elementos

// ITERANDO SOBRE MAP
for (let [chave, valor] of mapa) {
    console.log(chave, valor);
}

// CONVERTENDO PARA/FROM OBJETO
let obj = Object.fromEntries(mapa);
let novoMapa = new Map(Object.entries(obj));

üîç **REGULAR EXPRESSIONS (Regex):**

// CRIANDO REGEX
let regex1 = /padrao/;                    // Literal
let regex2 = new RegExp("padrao");        // Construtor

// FLAGS
let regex3 = /hello/i;    // i = case insensitive
let regex4 = /hello/g;    // g = global (todas ocorr√™ncias)

// M√âTODOS COMUNS
/hey/.test("hey there");          // true - verifica
"hello world".match(/hello/);     // ["hello"] - encontra
"hello world".replace(/world/, "JavaScript");  // Substitui

// SINTAXE B√ÅSICA
let emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;
let numeroRegex = /\\d+/;          // Um ou mais d√≠gitos
let palavraRegex = /\\w+/;         // Caracteres de palavra

üì¶ **M√ìDULOS ES6 - Organizando c√≥digo em arquivos:**

// EXPORTA√á√ÉO NOMEADA (math.js)
export function soma(a, b) {
    return a + b;
}

export const PI = 3.14159;
export default class Calculadora { }  // Exporta√ß√£o padr√£o

// IMPORTA√á√ÉO (app.js)
import { soma, PI } from './math.js';
import Calculadora from './math.js';  // Importa√ß√£o padr√£o

// IMPORTAR TUDO
import * as matematica from './math.js';

üõ†Ô∏è **EXEMPLOS PR√ÅTICOS AVAN√áADOS:**

// 1. SISTEMA DE CARRINHO DE COMPRAS
class Carrinho {
    constructor() {
        this.itens = new Map();
    }
    
    adicionar(produto, quantidade = 1) {
        if (this.itens.has(produto.id)) {
            let atual = this.itens.get(produto.id);
            this.itens.set(produto.id, { ...atual, quantidade: atual.quantidade + quantidade });
        } else {
            this.itens.set(produto.id, { produto, quantidade });
        }
    }
    
    calcularTotal() {
        return [...this.itens.values()].reduce((total, item) => {
            return total + (item.produto.preco * item.quantidade);
        }, 0);
    }
}

// 2. VALIDA√á√ÉO AVAN√áADA COM REGEX
const validadores = {
    email: (email) => /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(email),
    telefone: (tel) => /^\\(\\d{2}\\)\\s\\d{4,5}-\\d{4}$/.test(tel),
    cpf: (cpf) => /^\\d{3}\\.\\d{3}\\.\\d{3}-\\d{2}$/.test(cpf)
};

// 3. FUN√á√ÉO DE DEBOUNCE (otimiza√ß√£o de performance)
function debounce(funcao, tempo) {
    let timeout;
    return function executada(...args) {
        clearTimeout(timeout);
        timeout = setTimeout(() => funcao.apply(this, args), tempo);
    };
}

// Uso: input.addEventListener('input', debounce(buscar, 500));

üéØ **RECURSOS AVAN√áADOS √öTEIS:**

// OPTIONAL CHAINING (?.) - Acesso seguro
let cidade = usuario?.endereco?.cidade;  // undefined se qualquer parte for null/undefined

// NULLISH COALESCING (??) - Valores padr√£o
let nome = input ?? "Visitante";  // S√≥ usa "Visitante" se input for null/undefined

// PROMISE.ALL - M√∫ltiplas promises
let [usuario, posts] = await Promise.all([
    fetch('/usuario/1'),
    fetch('/usuario/1/posts')
]);

üí° **BENEF√çCIOS DOS RECURSOS MODERNOS:**
‚Ä¢ C√≥digo mais limpo e leg√≠vel
‚Ä¢ Menos propenso a erros
‚Ä¢ Melhor performance
‚Ä¢ Manuten√ß√£o mais f√°cil

‚ö†Ô∏è **CONSIDERA√á√ïES:**
‚Ä¢ Verifique suporte do navegador para funcionalidades novas
‚Ä¢ Use Babel para compatibilidade com navegadores antigos
‚Ä¢ Teste sempre em diferentes ambientes`
    },


    "git-comandos": {
        title: "üõ†Ô∏è Git - Controle de Vers√£o e Comandos Essenciais",
        content: `üìö **GIT - Sistema de Controle de Vers√£o**
Rastreia mudan√ßas no c√≥digo e facilita trabalho em equipe.

üéØ **CONCEITOS FUNDAMENTAIS:**

‚Ä¢ REPOSIT√ìRIO (repo) - Projeto versionado
‚Ä¢ COMMIT - "Snapshot" das mudan√ßas
‚Ä¢ BRANCH - Linha de desenvolvimento paralela
‚Ä¢ MERGE - Unir branches
‚Ä¢ REMOTE - Reposit√≥rio na nuvem (GitHub, GitLab)

üîÑ **FLUXO DE TRABALHO B√ÅSICO:**

[ Working Directory ] ‚Üí [ Staging Area ] ‚Üí [ Repository ]
     (arquivos locais)      (preparados)      (commits)

üöÄ **COMANDOS ESSENCIAIS:**

# INICIALIZAR REPOSIT√ìRIO
git init                        # Cria novo reposit√≥rio
git clone https://github.com/usuario/projeto.git  # Clona existente

# STATUS E INFORMA√á√ïES
git status                      # Mostra estado dos arquivos
git log                         # Hist√≥rico de commits
git diff                        # Mostra diferen√ßas n√£o commitadas

# ADICIONAR E COMMITAR
git add arquivo.txt             # Adiciona arquivo espec√≠fico
git add .                       # Adiciona TODOS os arquivos
git commit -m "Mensagem"        # Cria commit com descri√ß√£o

# TRABALHANDO COM BRANCHES
git branch                      # Lista branches
git branch nova-feature         # Cria nova branch
git checkout nova-feature       # Muda para branch
git checkout -b nova-feature    # Cria E muda para branch

# SINCRONIZAR COM REMOTO
git push origin main            # Envia commits para reposit√≥rio remoto
git pull origin main            # Baixa E integra altera√ß√µes do remoto
git fetch origin                # Baixa altera√ß√µes mas N√ÉO integra

üì• **GIT PULL vs GIT FETCH:**

# GIT PULL = FETCH + MERGE (autom√°tico)
git pull origin main
# ‚Üë Equivale a ‚Üì
git fetch origin
git merge origin/main

# GIT FETCH - Apenas baixa (mais seguro)
git fetch origin                # Baixa atualiza√ß√µes
git merge origin/main           # Integra manualmente

üõ†Ô∏è **CEN√ÅRIOS PR√ÅTICOS:**

# CEN√ÅRIO 1: Primeiro dia no projeto
git clone https://github.com/empresa/projeto.git
cd projeto
git checkout -b minha-feature

# CEN√ÅRIO 2: Desenvolvimento di√°rio
git status                      # Ver o que mudou
git add .                       # Preparar mudan√ßas
git commit -m "Adiciona funcionalidade X"
git push origin minha-feature   # Enviar para revis√£o

# CEN√ÅRIO 3: Atualizar com changes do time
git checkout main
git pull origin main            # Baixar atualiza√ß√µes
git checkout minha-feature
git merge main                  # Trazer updates para minha branch

üîß **COMANDOS AVAN√áADOS √öTEIS:**

# DESFAZENDO COISAS
git reset --soft HEAD~1         # Remove commit mas mant√©m mudan√ßas
git reset --hard HEAD~1         # Remove commit E mudan√ßas (CUIDADO!)
git checkout -- arquivo.txt     # Descarta mudan√ßas n√£o commitadas

# TRABALHANDO COM STASH
git stash                       # Guarda mudan√ßas temporariamente
git stash pop                   # Recupera mudan√ßas guardadas

# CONFIGURA√á√ÉO
git config --global user.name "Seu Nome"
git config --global user.email "seu@email.com"

üéØ **BOAS PR√ÅTICAS GIT:**

‚Ä¢ Commits at√¥micos (uma mudan√ßa por commit)
‚Ä¢ Mensagens de commit claras e descritivas
‚Ä¢ Trabalhe em branches separadas para cada feature
‚Ä¢ Sempre fa√ßa pull antes de come√ßar a trabalhar
‚Ä¢ Revise c√≥digo antes de merge para main

‚ö†Ô∏è **ERROS COMUNS:**

‚Ä¢ Commitar arquivos sens√≠veis (senhas, keys)
‚Ä¢ Esquecer de fazer pull antes de trabalhar
‚Ä¢ Mensagens de commit vagas ("update", "fix")
‚Ä¢ Trabalhar diretamente na branch main

üí° **DICAS PARA TRABALHO EM EQUIPE:**

# VERIFICAR MUDAN√áAS DE OUTRAS PESSOAS
git log --oneline --graph --decorate --all

# INTEGRAR BRANCH DE COLEGA
git fetch origin
git checkout --track origin/feature-colega

# RESOLVER CONFLITOS DE MERGE
# 1. Editar arquivos com conflitos (<<<<<<< HEAD ... >>>>>>> branch)
# 2. git add arquivos-resolvidos
# 3. git commit -m "Resolve merge conflicts"

üõ°Ô∏è **COMANDOS DE SEGURAN√áA:**

# VERIFICAR ANTES DE COMMITAR
git status
git diff

# VER HIST√ìRICO DETALHADO
git log --oneline -10          # √öltimos 10 commits
git show COMMIT_HASH           # Detalhes de commit espec√≠fico

# BACKUP DE BRANCH IMPORTANTE
git branch backup-minha-feature minha-feature`
    }
};

// Fun√ß√£o para carregar o material de estudo
function loadStudyMaterial() {
    const studyContent = document.getElementById('studyContent');
    
    if (!studyContent) {
        console.error('Elemento studyContent n√£o encontrado!');
        return;
    }
    
    // Criar menu de t√≥picos organizado por categoria
    let studyHTML = `
        <div class="topic-menu">
            <h3>üìö Material de Estudo Completo</h3>
            
            <div class="topic-category">
                <h4>üåê HTML Fundamentos</h4>
                <div class="topic-buttons">
                    <button class="topic-btn active" onclick="showTopic('html-estrutura-basica')">
                        üìö Estrutura HTML
                    </button>
                </div>
            </div>
            
            <div class="topic-category">
                <h4>üé® CSS Estiliza√ß√£o</h4>
                <div class="topic-buttons">
                    <button class="topic-btn" onclick="showTopic('css-sintaxe-seletores')">
                        üé® Sintaxe e Seletores
                    </button>
                </div>
            </div>
            
            <div class="topic-category">
                <h4>üíª JavaScript B√°sico</h4>
                <div class="topic-buttons">
                    <button class="topic-btn" onclick="showTopic('javascript-variaveis-tipos')">
                        üî§ Vari√°veis e Tipos
                    </button>
                    <button class="topic-btn" onclick="showTopic('javascript-funcoes')">
                        üéØ Fun√ß√µes
                    </button>
                </div>
            </div>
            
            <div class="topic-category">
                <h4>üîß JavaScript Intermedi√°rio</h4>
                <div class="topic-buttons">
                    <button class="topic-btn" onclick="showTopic('javascript-arrays-objetos')">
                        üìä Arrays e Objetos
                    </button>
                </div>
            </div>
            
            <div class="topic-category">
                <h4>‚ö° JavaScript Avan√ßado</h4>
                <div class="topic-buttons">
                    <button class="topic-btn" onclick="showTopic('javascript-dom-eventos')">
                        üåê DOM e Eventos
                    </button>
                    <button class="topic-btn" onclick="showTopic('javascript-avancado')">
                        üöÄ Recursos ES6+
                    </button>
                </div>
            </div>
            
            <div class="topic-category">
                <h4>üõ†Ô∏è Ferramentas</h4>
                <div class="topic-buttons">
                    <button class="topic-btn" onclick="showTopic('git-comandos')">
                        üìö Git e Comandos
                    </button>
                </div>
            </div>
        </div>
        
        <div class="topic-content" id="topicContent">
            <div class="topic-header">
                <h2>üìö HTML - Estrutura B√°sica e Tags Fundamentais</h2>
            </div>
            <div class="topic-body">
                <pre>${studyMaterial['html-estrutura-basica'].content}</pre>
            </div>
        </div>
        
        <div class="study-tips">
            <h4>üí° Dicas de Estudo:</h4>
            <ul>
                <li><strong>Comece pelo b√°sico:</strong> HTML ‚Üí CSS ‚Üí JavaScript</li>
                <li><strong>Pratique sempre:</strong> Crie pequenos projetos</li>
                <li><strong>Use este material:</strong> Consulte durante o quiz</li>
                <li><strong>N√£o decore:</strong> Entenda os conceitos</li>
            </ul>
        </div>
    `;
    
    studyContent.innerHTML = studyHTML;
    console.log('Material de estudo carregado com sucesso!');
}

// Fun√ß√£o para mostrar um t√≥pico espec√≠fico
function showTopic(topicKey) {
    const topic = studyMaterial[topicKey];
    if (!topic) {
        console.error('T√≥pico n√£o encontrado:', topicKey);
        return;
    }
    
    const topicContent = document.getElementById('topicContent');
    if (!topicContent) {
        console.error('Elemento topicContent n√£o encontrado!');
        return;
    }
    
    // Atualizar bot√µes ativos
    document.querySelectorAll('.topic-btn').forEach(btn => {
        btn.classList.remove('active');
    });
    
    // Marcar bot√£o atual como ativo
    if (event && event.target) {
        event.target.classList.add('active');
    }
    
    // Atualizar conte√∫do
    topicContent.innerHTML = `
        <div class="topic-header">
            <h2>${topic.title}</h2>
        </div>
        <div class="topic-body">
            <pre>${topic.content}</pre>
        </div>
    `;
    
    // Rolagem suave para o topo do conte√∫do
    topicContent.scrollIntoView({ behavior: 'smooth' });
}

// Fun√ß√£o para alternar a coluna de estudo
function toggleStudyColumn() {
    const studyColumn = document.getElementById('studyColumn');
    const quizColumn = document.getElementById('quizColumn');
    const toggleBtns = document.querySelectorAll('.toggle-btn');
    
    if (!studyColumn || !quizColumn) {
        console.error('Elementos da coluna n√£o encontrados!');
        return;
    }
    
    studyColumn.classList.toggle('collapsed');
    quizColumn.classList.toggle('expanded');
    
    toggleBtns.forEach(btn => {
        if (studyColumn.classList.contains('collapsed')) {
            btn.textContent = 'üìö Material';
        } else {
            btn.textContent = '‚óÄÔ∏è Ocultar';
        }
    });
}

// Carregar o material quando a p√°gina estiver pronta
document.addEventListener('DOMContentLoaded', function() {
    console.log('DOM carregado, inicializando material de estudo...');
    loadStudyMaterial();
});

// Adicionar tamb√©m ao objeto global window para acesso via HTML
window.loadStudyMaterial = loadStudyMaterial;
window.showTopic = showTopic;
window.toggleStudyColumn = toggleStudyColumn;

console.log('Study.js carregado com sucesso! Material completo dispon√≠vel.');